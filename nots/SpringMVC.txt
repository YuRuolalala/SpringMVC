SpringMVC
    ·SpringMVC简介
        ·概述：
            ·SpringMVC技术与Servlet技术功能等同，均属于web层开发技术
            ·SpringMVC是一种基于JAVA实现MVC模型的轻量级web框架
            ·优点：
                ·使用简单，开发便捷(相比于Servlet)
                ·灵活性强

        ·SpringMVC入门案例
            ①：使用SpringMVC技术需要先导入SpringMVC坐标与Servlet坐标
                <!--导入Springmvc与servlet-->
                <dependency>
                  <groupId>javax.servlet</groupId>
                  <artifactId>javax.servlet-api</artifactId>
                  <version>3.1.0</version>
                  <scope>provided</scope>
                </dependency>

                <dependency>
                  <groupId>org.springframework</groupId>
                  <artifactId>spring-webmvc</artifactId>
                  <version>5.2.12.RELEASE</version>
                </dependency>
            ②：创建SpringMVC控制器类(等同于Servlet功能)
                @Controller
                public class UserController {
                    /**
                     * 设置当前操作的访问路径
                     * 设置当前操作的返回值类型
                     */
                    @RequestMapping("/save")
                    @ResponseBody
                    public String save(){
                        System.out.println("user save...");
                        return "{'module':'springmvc'}";
                    }
                }

            ③：初始化SpringMVC环境(同Spring环境)，设定SpringMVC加载对应的bean
                //创建springmvc的配置文件，加载controller对应的bean
                @Configuration
                @ComponentScan("com.controller")
                public class SpringMvcConfig {
                }
            ④：初始化Servlet容器，加载SrpingMVC环境，并设置SpringMVC技术处理的请求
                public class ServletContainer extends AbstractDispatcherServletInitializer {
                    @Override
                    protected WebApplicationContext createServletApplicationContext() {
                        AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext();
                        ctx.register(SpringMvcConfig.class);
                        return ctx;
                    }

                    @Override
                    protected String[] getServletMappings() {
                        return new String[]{"/"};
                    }

                    @Override
                    protected WebApplicationContext createRootApplicationContext() {
                        return null;
                    }
                }

            入门案例：
                ·新注解：
                    ·名称：@Controller
                    ·类型：类注解
                    ·位置：SpringMVC控制器类定义上方
                    ·作用：设定SpringMVC的核心控制器bean
                ·SpringMVC入门程序开发总结(1+N)
                    ·一次性工作
                        ·创建工程，设置服务器，加载工程
                        ·导入坐标
                        ·创建web容器启动类，加载SpringMVC配置，并设置SpringMVC请求拦截路径
                        ·SpringMVC核心配置类(设置配置类，扫描controller包，加载Controller控制器bean)
                    ·多次工作
                        ·定义处理请求的控制器类
                        ·定义处理请求的控制器方法，并配置映射路径(@RequestMapping)与返回json数据(@ResponseBody)
                ·工作流程分析：
                    ·启动服务器初始化过程
                        1·服务器启动，执行ServletContainersInitConfig类，初始化web容器
                        2·执行createServletApplicationContext方法，创建了WebApplicationContext对象
                        3·加载SpringMvcConfig
                        4·执行@ComponentScan加载对应的bean
                        5·加载UserController，每个@RequestMapping的名称对应一个具体的方法
                        6·执行getServletMappings方法，定义所有的请求都通过SpringMVC
                    ·单次请求过程
                        1·发送请求
                        2·web容器发现所有请求都经过SpringMVC，将请求交给SpringMVC处理
                        3·解析请求路径
                        4·由路径匹配执行对应的方法
                        5·执行方法
                        6·检测到由@ResponseBody直接将方法的返回值作为响应体返回给请求方
        ·Controller加载控制与业务bean加载控制
            ·SpringMVC相关bean(表现层bean)
            ·Spring控制的bean
                ·业务bean(Service)
                ·功能bean(DataSource等)
            ·因为功能不同，如何避免Spring错误的加载到SpringMVC的bean？
                加载Spring控制的bean的时候排除掉SpringMVC控制的bean
                ·SpringMVC相关bean加载控制
                    ·SpringMVC加载的bean对应的包均可再controller包内
                ·Spring相关bean加载控制
                    ·方式一：Spring加载的bean设定扫描范围为com包，排除掉controller包内的bean
                        · @ComponentScan(value = "com",
                                     excludeFilters = @ComponentScan.Filter(
                                             type = FilterType.ANNOTATION,
                                             classes = Controller.class
                                     )
                             )
                    ·方式二：Srping加载的bean设定扫描范围为精准范围，例如service包，dao包
                        · @ComponentScan({"com.dao","com.service"})
                    ·方式三：不区分Spring与SpringMVC环境，加载到同一个环境中

        ·PostMan简介
            ·Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件
            ·作用：常用于进行接口测试，免除了后端开发自己做测试页面

    ·请求与响应
        ·请求映射路径
            1·团队多人开发，每人设置不同的请求路径，冲突问题如何解决？
                设置模块名作为请求路径前缀
            ·名称：@RequestMapping
            ·类型：方法注解 类注解
            ·位置：SpringMVC控制器方法定义上方
            ·作用：设置当前控制器方法请求访问路径，如果设置在类上统一设置当前控制器方法请求访问路径前缀
            ·范例：
                @Controller
                @RequestMapping("/book")
                public class BookController {

                    @RequestMapping("/save")
                    @ResponseBody
                    public String save(){
                        System.out.println("book save...");
                        return "{'module':'book save'}";
                    }
                }
        ·请求参数
            ·Get请求

            ·Post请求
            ·SpringMVC解决Post请求中文乱码问题
                在ServletSpringMvcConfig类中重写getServletFilters()方法
                @Override
                protected Filter[] getServletFilters(){
                    CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter();
                    characterEncodingFilter.setEncoding("UTF-8");
                    return new Filter[]{characterEncodingFilter};
                }

            ·各种参数
                ·普通参数
                    ·请求参数名与形参变量名不同，使用@RequestParam绑定参数关系
                        @RequestMapping("/paramDifferentName")
                        @ResponseBody
                        public String paramDifferentName(@RequestParam("Username")String name,@RequestParam("ages")Integer age){
                            System.out.println("普通参数传递 name==>"+name);
                            System.out.println("普通参数传递 age==>"+age);
                            return "{'module':'user save'}";
                        }

                ·pojo类型参数
                    ·请求参数名与形参对象属性名相同，定义pojo类型 形参即可接收参数
                ·嵌套pojo类型参数
                    ·前端参数名称等于 XXX.xxx XXX为pojo类中引用类型的成员变量名 xxx为成员变量名类型内部的成员变量名
                ·数组类型参数
                    ·请求参数名与形参对象属性名相同且请求参数为多个，定义数组类型形参即可接收参数
                ·集合类型参数
                    ·请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam绑定参数关系

        ·日期类型参数传递
            ·日期类型数据基于系统不同格式也不尽相同
                ·2088-08-18
                ·2088/08/18
                ·08/18/2088
                接收形参时，根据不同的日期格式设置不同的接收方式
                @DateTimeFormat(pattern="yyyy-MM-dd")
        ·响应json数据
            ·json数组
                ①：导入依赖坐标
                ②：在SpringMvcConfig类中添加注解 @EnableWebMvc
                ③：在方法形参前添加@RequestBody
            ·json对象(pojo)

            ·json数组(pojo)

            @RequestBody与@RequestParam区别
                ·区别：
                    @RequestParam用于接收url地址传参，表单传参
                    @RequestBody 用于接收json数据
                ·应用：
                    ·后期开发中，发送json数据格式为主， @RequestBody应用较广
                    ·如果发送非json格式数据，选用@RequestParam接收请求参数
        ·响应页面
        ·响应数据
            ·文本数据
            ·json数据
        ·@ResponseBody
            ·作用：设置当前控制器返回值作为响应体
    ·REST风格
        ·REST(Representational State Transfer)，表现形式状态转换
            ·传统风格资源描述形式：
                http://localhost/user/getById?id=1
            ·REST风格描述形式：
                http://localhost/user/1
        ·优点：
            ·隐藏资源的访问行为，无法通过地址得知资源时何种操作
            ·书写简化
        ·注意事项：上述行为是约定方式，约定不是规范，可以打破，所以称REST风格，而不是REST规范
        描述模块的名称通常使用负数，也就是加s的格式描述，表示此类资源，而非单个资源，例如：users、books

        ·REST风格入门案例
            @PathVariable用于接收路径参数，使用{参数名称}描述路径参数
            @RestController 替代@Controller与@ResponseBody两个注解组合功能
            @GetMapping @PostMapping @PutMapping @DeleteMapping

        ·案例：基于REST页面数据交互
            ·先做后台功能，开发接口并调通接口
            ·再做页面异步调用，确认功能可以正常访问
            ·最后完成页面的数据展示
            ·补充：放行静态资源访问！！！！
                @Configuration
                public class SpringMvcSupport extends WebMvcConfigurationSupport {
                    //设置静态资源访问过滤，当前类需要设置为配置类，并被扫描加载
                    @Override
                    protected void addResourceHandlers(ResourceHandlerRegistry registry) {
                        //当访问/pages/????时候，从/pages目录下查找内容
                        registry.addResourceHandler("/pages/**").addResourceLocations("/pages/");
                        registry.addResourceHandler("/js/**").addResourceLocations("/js/");
                        registry.addResourceHandler("/css/**").addResourceLocations("/css/");
                        registry.addResourceHandler("/plugins/**").addResourceLocations("/plugins/");

                    }
                }

    ·SSM整合
        ·整合过程略，参考SpringMVC_Demo06_SSM
        ·表现层与前端数据传输协议定义
            ·表现层数据封装：
            ·设置统一数据返回结果类
                public class Result{
                    private Object data;
                    private Integer code;
                    private String msg;
                }
                注意事项：Result类中的字段并不是固定的，可以根据需要自行增减
                提供若干个构造方法，方便操作

        ·异常处理：
            ·出现异常现象的常见位置与常见诱因如下：
                ·框架内部抛出的异常：因使用不合规导致
                ·数据层抛出的异常：因外部服务器故障导致(例如：服务器访问超时)
                ·业务层抛出的异常：因业务逻辑书写错误导致(例如：遍历业务书写操作，导致索引异常等)
                ·表现层抛出的异常：因数据收集、校验等规则导致(例如，不匹配的数据类型间导致异常)
                ·工具类抛出的异常：因工具类书写不够严谨不够健壮导致(例如：必要时放的连接长期未释放等)

            ·各个层级均出现异常，异常处理代码书写在哪一层？
                所有的异常均抛出到表现层进行处理

            ·表现出处理异常，每个方法中单独书写，代码书写量巨大且意义不大，如何解决？
                AOP思想

            ·异常处理器：
                ·集中的、统一的处理项目中出现的异常
                @RestControllerAdvice
                public class ProjectExceptionAdvice {

                    @ExceptionHandler(Exception.class)
                    public Result doException(Exception e){
                        System.out.println("异常往哪跑？！");
                        return new Result(666,null,"出异常了兄弟");
                    }
                }

            ·项目异常分类：
                ·业务异常(BusinessException)
                    ·规范的用户行为产生的异常
                    ·不规范的用户行为操作产生的异常
                        ·发送对应消息传递给用户，提醒规范操作
                ·系统异常(SystemException)
                    ·项目运行过程中可预计且无法避免的异常
                        ·发送固定消息传递给用户，安抚用户
                        ·发送特定消息给运维人员，提醒维护
                        ·记录日志
                ·其他异常(Exception)
                    ·编程人员未预期到的异常
                        ·发送固定消息传递给用户，按复用户
                        ·发送特定消息给编程人员，提醒维护(纳入预期范围内)
                        ·记录日志
    ·拦截器